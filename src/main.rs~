#[macro_use]

use std::io;
use std::collections::VecDeque;

//1) Input: }](){ Output: (){} 2) Input: sh(dh)} Output: sh(dh) 3) Input: ]h({hdb}b)[ Output: Infinite

#[allow(unused_macros)]
macro_rules! read_str {
    ($out:ident) => {
        let mut inner = String::new();
        io::stdin().read_line(&mut inner).expect("A String");
        let $out = inner.trim();
    };
}

fn valid(xs: &mut String) -> bool {
    let mut st: String = String::new();
    for c in xs.chars() {
        match c {
            '(' => st.push('('),
            '[' => st.push('['),
            '{' => st.push('{'),
            ')' => match st.pop() { Some('(') => continue, _ => return false },
            ']' => match st.pop() { Some('[') => continue, _ => return false },
            '}' => match st.pop() { Some('{') => continue, _ => return false },
            _   => continue,
            
        }
    }
    if st.is_empty() {
        return true
    }
    else {
        return false
    }
}

fn sol(xs: &String) -> String {
    let mut res: String = String::new();
    for (i,c) in xs.chars().enumerate() {
        match c {
            '(' => match xs.find(')') { Some(j) => if valid(&mut xs[i..j+1].to_string()) { res = res + &xs[i..j+1] } else { continue },
                                        None    => continue },
            '[' => match xs.find(']') { Some(j) => if valid(&mut xs[i..j+1].to_string()) { res = res + &xs[i..j+1] } else { continue },
                                        None    => continue },
            '{' => match xs.find('}') { Some(j) => if valid(&mut xs[i..j+1].to_string()) { res = res + &xs[i..j+1] } else { continue },
                                        None    => continue },
            ')' => continue,
            ']' => continue,
            '}' => continue,
            _   => res.push(c),
        }
    }
    return res
}
            
fn main() {
    read_str!(xs);
    println!("{}", sol(&mut xs.to_string()))
    // let xs = String::from("absdef");
    // println!("{}", &xs[0..3]);
}
